// Generated by kea-typegen on Thu, 25 Apr 2024 17:38:48 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from 'kea-forms'
import type { OklchInterpolator } from './colorStopLogic'

export interface colorStopLogicType extends Logic {
  actionCreators: {
    setColorStopValue: (
      key: FieldName,
      value: any
    ) => {
      type: "set color stop value (src.logics.colorStopLogic)";
      payload: {
        name: FieldName;
        value: any;
      };
    };
    setColorStopValues: (
      values: DeepPartial<{
        colorCount: number;
        from: string;
        to: string;
      }>
    ) => {
      type: "set color stop values (src.logics.colorStopLogic)";
      payload: {
        values: DeepPartial<{
          colorCount: number;
          from: string;
          to: string;
        }>;
      };
    };
    setColorStopManualErrors: (errors: Record<string, any>) => {
      type: "set color stop manual errors (src.logics.colorStopLogic)";
      payload: {
        errors: Record<string, any>;
      };
    };
    touchColorStopField: (key: string) => {
      type: "touch color stop field (src.logics.colorStopLogic)";
      payload: {
        key: string;
      };
    };
    resetColorStop: (values?: {
      colorCount: number;
      from: string;
      to: string;
    }) => {
      type: "reset color stop (src.logics.colorStopLogic)";
      payload: {
        values?: {
          colorCount: number;
          from: string;
          to: string;
        };
      };
    };
    submitColorStop: () => {
      type: "submit color stop (src.logics.colorStopLogic)";
      payload: {
        value: boolean;
      };
    };
    submitColorStopRequest: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => {
      type: "submit color stop request (src.logics.colorStopLogic)";
      payload: {
        colorStop: {
          colorCount: number;
          from: string;
          to: string;
        };
      };
    };
    submitColorStopSuccess: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => {
      type: "submit color stop success (src.logics.colorStopLogic)";
      payload: {
        colorStop: {
          colorCount: number;
          from: string;
          to: string;
        };
      };
    };
    submitColorStopFailure: (
      error: Error,
      errors: Record<string, any>
    ) => {
      type: "submit color stop failure (src.logics.colorStopLogic)";
      payload: {
        error: Error;
        errors: Record<string, any>;
      };
    };
  };
  actionKeys: {
    "set color stop value (src.logics.colorStopLogic)": "setColorStopValue";
    "set color stop values (src.logics.colorStopLogic)": "setColorStopValues";
    "set color stop manual errors (src.logics.colorStopLogic)": "setColorStopManualErrors";
    "touch color stop field (src.logics.colorStopLogic)": "touchColorStopField";
    "reset color stop (src.logics.colorStopLogic)": "resetColorStop";
    "submit color stop (src.logics.colorStopLogic)": "submitColorStop";
    "submit color stop request (src.logics.colorStopLogic)": "submitColorStopRequest";
    "submit color stop success (src.logics.colorStopLogic)": "submitColorStopSuccess";
    "submit color stop failure (src.logics.colorStopLogic)": "submitColorStopFailure";
  };
  actionTypes: {
    setColorStopValue: "set color stop value (src.logics.colorStopLogic)";
    setColorStopValues: "set color stop values (src.logics.colorStopLogic)";
    setColorStopManualErrors: "set color stop manual errors (src.logics.colorStopLogic)";
    touchColorStopField: "touch color stop field (src.logics.colorStopLogic)";
    resetColorStop: "reset color stop (src.logics.colorStopLogic)";
    submitColorStop: "submit color stop (src.logics.colorStopLogic)";
    submitColorStopRequest: "submit color stop request (src.logics.colorStopLogic)";
    submitColorStopSuccess: "submit color stop success (src.logics.colorStopLogic)";
    submitColorStopFailure: "submit color stop failure (src.logics.colorStopLogic)";
  };
  actions: {
    setColorStopValue: (key: FieldName, value: any) => void;
    setColorStopValues: (
      values: DeepPartial<{
        colorCount: number;
        from: string;
        to: string;
      }>
    ) => void;
    setColorStopManualErrors: (errors: Record<string, any>) => void;
    touchColorStopField: (key: string) => void;
    resetColorStop: (values?: {
      colorCount: number;
      from: string;
      to: string;
    }) => void;
    submitColorStop: () => void;
    submitColorStopRequest: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => void;
    submitColorStopSuccess: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => void;
    submitColorStopFailure: (error: Error, errors: Record<string, any>) => void;
  };
  asyncActions: {
    setColorStopValue: (key: FieldName, value: any) => Promise<any>;
    setColorStopValues: (
      values: DeepPartial<{
        colorCount: number;
        from: string;
        to: string;
      }>
    ) => Promise<any>;
    setColorStopManualErrors: (errors: Record<string, any>) => Promise<any>;
    touchColorStopField: (key: string) => Promise<any>;
    resetColorStop: (values?: {
      colorCount: number;
      from: string;
      to: string;
    }) => Promise<any>;
    submitColorStop: () => Promise<any>;
    submitColorStopRequest: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => Promise<any>;
    submitColorStopSuccess: (colorStop: {
      colorCount: number;
      from: string;
      to: string;
    }) => Promise<any>;
    submitColorStopFailure: (
      error: Error,
      errors: Record<string, any>
    ) => Promise<any>;
  };
  defaults: {
    colorStop: {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: boolean;
    showColorStopErrors: boolean;
    colorStopChanged: boolean;
    colorStopTouches: Record<string, boolean>;
    colorStopManualErrors: Record<string, any>;
  };
  events: {};
  key: undefined;
  listeners: {};
  path: ["src", "logics", "colorStopLogic"];
  pathString: "src.logics.colorStopLogic";
  props: Record<string, unknown>;
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    colorStop: {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: boolean;
    showColorStopErrors: boolean;
    colorStopChanged: boolean;
    colorStopTouches: Record<string, boolean>;
    colorStopManualErrors: Record<string, any>;
  };
  reducers: {
    colorStop: (
      state: {
        colorCount: number;
        from: string;
        to: string;
      },
      action: any,
      fullState: any
    ) => {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean;
    showColorStopErrors: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean;
    colorStopChanged: (state: boolean, action: any, fullState: any) => boolean;
    colorStopTouches: (
      state: Record<string, boolean>,
      action: any,
      fullState: any
    ) => Record<string, boolean>;
    colorStopManualErrors: (
      state: Record<string, any>,
      action: any,
      fullState: any
    ) => Record<string, any>;
  };
  selector: (state: any) => {
    colorStop: {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: boolean;
    showColorStopErrors: boolean;
    colorStopChanged: boolean;
    colorStopTouches: Record<string, boolean>;
    colorStopManualErrors: Record<string, any>;
  };
  selectors: {
    colorStop: (
      state: any,
      props?: any
    ) => {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: (state: any, props?: any) => boolean;
    showColorStopErrors: (state: any, props?: any) => boolean;
    colorStopChanged: (state: any, props?: any) => boolean;
    colorStopTouches: (state: any, props?: any) => Record<string, boolean>;
    colorStopManualErrors: (state: any, props?: any) => Record<string, any>;
    colorStopTouched: (state: any, props?: any) => boolean;
    colorStopValidationErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<
      {
        colorCount: number;
        from: string;
        to: string;
      },
      ValidationErrorType
    >;
    colorStopAllErrors: (state: any, props?: any) => Record<string, any>;
    colorStopHasErrors: (state: any, props?: any) => boolean;
    colorStopErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<
      {
        colorCount: number;
        from: string;
        to: string;
      },
      ValidationErrorType
    >;
    isColorStopValid: (state: any, props?: any) => boolean;
    from: (state: any, props?: any) => any;
    colorCount: (state: any, props?: any) => any;
    to: (state: any, props?: any) => any;
    gradient: (state: any, props?: any) => OklchInterpolator;
    colors: (state: any, props?: any) => any[];
  };
  sharedListeners: {};
  values: {
    colorStop: {
      colorCount: number;
      from: string;
      to: string;
    };
    isColorStopSubmitting: boolean;
    showColorStopErrors: boolean;
    colorStopChanged: boolean;
    colorStopTouches: Record<string, boolean>;
    colorStopManualErrors: Record<string, any>;
    colorStopTouched: boolean;
    colorStopValidationErrors: DeepPartialMap<
      {
        colorCount: number;
        from: string;
        to: string;
      },
      ValidationErrorType
    >;
    colorStopAllErrors: Record<string, any>;
    colorStopHasErrors: boolean;
    colorStopErrors: DeepPartialMap<
      {
        colorCount: number;
        from: string;
        to: string;
      },
      ValidationErrorType
    >;
    isColorStopValid: boolean;
    from: any;
    colorCount: any;
    to: any;
    gradient: OklchInterpolator;
    colors: any[];
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    from: (colorStopData: any) => any;
    colorCount: (colorStopData: any) => any;
    to: (colorStopData: any) => any;
    gradient: (from: any, to: any) => OklchInterpolator;
  };
}
