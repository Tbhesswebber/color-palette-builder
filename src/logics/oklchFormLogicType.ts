// Generated by kea-typegen on Tue, 28 Nov 2023 05:13:00 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Color, ColorFormFields } from './oklchFormLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from 'kea-forms'

export interface oklchFormLogicType extends Logic {
  actionCreators: {
    setColorFormValue: (
      key: FieldName,
      value: any
    ) => {
      type: "set color form value (src.colorLogic)";
      payload: {
        name: FieldName;
        value: any;
      };
    };
    setColorFormValues: (values: DeepPartial<ColorFormFields>) => {
      type: "set color form values (src.colorLogic)";
      payload: {
        values: DeepPartial<ColorFormFields>;
      };
    };
    setColorFormManualErrors: (errors: Record<string, any>) => {
      type: "set color form manual errors (src.colorLogic)";
      payload: {
        errors: Record<string, any>;
      };
    };
    touchColorFormField: (key: string) => {
      type: "touch color form field (src.colorLogic)";
      payload: {
        key: string;
      };
    };
    resetColorForm: (values?: ColorFormFields) => {
      type: "reset color form (src.colorLogic)";
      payload: {
        values?: ColorFormFields;
      };
    };
    submitColorForm: () => {
      type: "submit color form (src.colorLogic)";
      payload: {
        value: boolean;
      };
    };
    submitColorFormRequest: (colorForm: ColorFormFields) => {
      type: "submit color form request (src.colorLogic)";
      payload: {
        colorForm: ColorFormFields;
      };
    };
    submitColorFormSuccess: (colorForm: ColorFormFields) => {
      type: "submit color form success (src.colorLogic)";
      payload: {
        colorForm: ColorFormFields;
      };
    };
    submitColorFormFailure: (
      error: Error,
      errors: Record<string, any>
    ) => {
      type: "submit color form failure (src.colorLogic)";
      payload: {
        error: Error;
        errors: Record<string, any>;
      };
    };
  };
  actionKeys: {
    "set color form value (src.colorLogic)": "setColorFormValue";
    "set color form values (src.colorLogic)": "setColorFormValues";
    "set color form manual errors (src.colorLogic)": "setColorFormManualErrors";
    "touch color form field (src.colorLogic)": "touchColorFormField";
    "reset color form (src.colorLogic)": "resetColorForm";
    "submit color form (src.colorLogic)": "submitColorForm";
    "submit color form request (src.colorLogic)": "submitColorFormRequest";
    "submit color form success (src.colorLogic)": "submitColorFormSuccess";
    "submit color form failure (src.colorLogic)": "submitColorFormFailure";
  };
  actionTypes: {
    setColorFormValue: "set color form value (src.colorLogic)";
    setColorFormValues: "set color form values (src.colorLogic)";
    setColorFormManualErrors: "set color form manual errors (src.colorLogic)";
    touchColorFormField: "touch color form field (src.colorLogic)";
    resetColorForm: "reset color form (src.colorLogic)";
    submitColorForm: "submit color form (src.colorLogic)";
    submitColorFormRequest: "submit color form request (src.colorLogic)";
    submitColorFormSuccess: "submit color form success (src.colorLogic)";
    submitColorFormFailure: "submit color form failure (src.colorLogic)";
  };
  actions: {
    setColorFormValue: (key: FieldName, value: any) => void;
    setColorFormValues: (values: DeepPartial<ColorFormFields>) => void;
    setColorFormManualErrors: (errors: Record<string, any>) => void;
    touchColorFormField: (key: string) => void;
    resetColorForm: (values?: ColorFormFields) => void;
    submitColorForm: () => void;
    submitColorFormRequest: (colorForm: ColorFormFields) => void;
    submitColorFormSuccess: (colorForm: ColorFormFields) => void;
    submitColorFormFailure: (error: Error, errors: Record<string, any>) => void;
  };
  asyncActions: {
    setColorFormValue: (key: FieldName, value: any) => Promise<any>;
    setColorFormValues: (values: DeepPartial<ColorFormFields>) => Promise<any>;
    setColorFormManualErrors: (errors: Record<string, any>) => Promise<any>;
    touchColorFormField: (key: string) => Promise<any>;
    resetColorForm: (values?: ColorFormFields) => Promise<any>;
    submitColorForm: () => Promise<any>;
    submitColorFormRequest: (colorForm: ColorFormFields) => Promise<any>;
    submitColorFormSuccess: (colorForm: ColorFormFields) => Promise<any>;
    submitColorFormFailure: (
      error: Error,
      errors: Record<string, any>
    ) => Promise<any>;
  };
  defaults: {
    colorForm: ColorFormFields;
    isColorFormSubmitting: boolean;
    showColorFormErrors: boolean;
    colorFormChanged: boolean;
    colorFormTouches: Record<string, boolean>;
    colorFormManualErrors: Record<string, any>;
  };
  events: {};
  key: undefined;
  listeners: {};
  path: ["src", "colorLogic"];
  pathString: "src.colorLogic";
  props: Record<string, unknown>;
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    colorForm: ColorFormFields;
    isColorFormSubmitting: boolean;
    showColorFormErrors: boolean;
    colorFormChanged: boolean;
    colorFormTouches: Record<string, boolean>;
    colorFormManualErrors: Record<string, any>;
  };
  reducers: {
    colorForm: (
      state: ColorFormFields,
      action: any,
      fullState: any
    ) => ColorFormFields;
    isColorFormSubmitting: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean;
    showColorFormErrors: (
      state: boolean,
      action: any,
      fullState: any
    ) => boolean;
    colorFormChanged: (state: boolean, action: any, fullState: any) => boolean;
    colorFormTouches: (
      state: Record<string, boolean>,
      action: any,
      fullState: any
    ) => Record<string, boolean>;
    colorFormManualErrors: (
      state: Record<string, any>,
      action: any,
      fullState: any
    ) => Record<string, any>;
  };
  selector: (state: any) => {
    colorForm: ColorFormFields;
    isColorFormSubmitting: boolean;
    showColorFormErrors: boolean;
    colorFormChanged: boolean;
    colorFormTouches: Record<string, boolean>;
    colorFormManualErrors: Record<string, any>;
  };
  selectors: {
    colorForm: (state: any, props?: any) => ColorFormFields;
    isColorFormSubmitting: (state: any, props?: any) => boolean;
    showColorFormErrors: (state: any, props?: any) => boolean;
    colorFormChanged: (state: any, props?: any) => boolean;
    colorFormTouches: (state: any, props?: any) => Record<string, boolean>;
    colorFormManualErrors: (state: any, props?: any) => Record<string, any>;
    colorFormTouched: (state: any, props?: any) => boolean;
    colorFormValidationErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<ColorFormFields, ValidationErrorType>;
    colorFormAllErrors: (state: any, props?: any) => Record<string, any>;
    colorFormHasErrors: (state: any, props?: any) => boolean;
    colorFormErrors: (
      state: any,
      props?: any
    ) => DeepPartialMap<ColorFormFields, ValidationErrorType>;
    isColorFormValid: (state: any, props?: any) => boolean;
    chromaFormula: (state: any, props?: any) => string;
    lightnessFormula: (state: any, props?: any) => string;
    tintCount: (state: any, props?: any) => number;
    analogousHues: (
      state: any,
      props?: any
    ) => {
      count: number;
      gap: number;
    };
    complementaryHues: (
      state: any,
      props?: any
    ) => {
      count: number;
      gap: number;
    };
    centerPoint: (state: any, props?: any) => number;
    hues: (state: any, props?: any) => number[];
    greys: (
      state: any,
      props?: any
    ) => {
      chroma: number;
      css: string;
      hue: number;
      lightness: number;
    }[];
    colors: (state: any, props?: any) => [...Color[]][];
    cssVars: (state: any, props?: any) => string;
  };
  sharedListeners: {};
  values: {
    colorForm: ColorFormFields;
    isColorFormSubmitting: boolean;
    showColorFormErrors: boolean;
    colorFormChanged: boolean;
    colorFormTouches: Record<string, boolean>;
    colorFormManualErrors: Record<string, any>;
    colorFormTouched: boolean;
    colorFormValidationErrors: DeepPartialMap<
      ColorFormFields,
      ValidationErrorType
    >;
    colorFormAllErrors: Record<string, any>;
    colorFormHasErrors: boolean;
    colorFormErrors: DeepPartialMap<ColorFormFields, ValidationErrorType>;
    isColorFormValid: boolean;
    chromaFormula: string;
    lightnessFormula: string;
    tintCount: number;
    analogousHues: {
      count: number;
      gap: number;
    };
    complementaryHues: {
      count: number;
      gap: number;
    };
    centerPoint: number;
    hues: number[];
    greys: {
      chroma: number;
      css: string;
      hue: number;
      lightness: number;
    }[];
    colors: [...Color[]][];
    cssVars: string;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    chromaFormula: (colorForm: ColorFormFields) => string;
    lightnessFormula: (colorForm: ColorFormFields) => string;
    tintCount: (colorForm: ColorFormFields) => number;
    analogousHues: (colorForm: ColorFormFields) => {
      count: number;
      gap: number;
    };
    complementaryHues: (colorForm: ColorFormFields) => {
      count: number;
      gap: number;
    };
    centerPoint: (colorForm: ColorFormFields) => number;
    hues: (
      centerPoint: number,
      analogousHues: {
        count: number;
        gap: number;
      },
      complementaryHues: {
        count: number;
        gap: number;
      }
    ) => number[];
    greys: (
      tintCount: number,
      lightnessFormula: string,
      centerPoint: number
    ) => {
      chroma: number;
      css: string;
      hue: number;
      lightness: number;
    }[];
    colors: (
      tintCount: number,
      lightnessFormula: string,
      chromaFormula: string,
      hues: number[]
    ) => [...Color[]][];
    cssVars: (
      colors: Color[][],
      greys: {
        chroma: number;
        css: string;
        hue: number;
        lightness: number;
      }[]
    ) => string;
  };
}
